{
  Widget Object - Template
}
CON
  DEBOUNCE_TIMER = 200

  K_WIDTH = 240
  K_HEIGHT = 110
  T_HEIGHT = 30

'Text align constants
  #0, LEFT_ALIGN, CENTER_ALIGN, RIGHT_ALIGN

VAR
'Attributes
  long id                       'Unique ID - (window index << 4)|(button index)
  long bg_color                 'background color
  long fg_color                 'foreground color
  long ol_color                 'outline = border
  word xtop                     'Top Left X (Pixel)
  word ytop                     'Top Left Y (Pixel)
  word xbot                     'Bottom Right X (Pixel)
  word ybot                     'Bottom Right Y (Pixel)
  byte border_width             'Border width in pixels
  LONG image_pointer
  LONG string_pointer

'Method Pointers
  long event_handler            'Default event handler method pointer

'Internal state variables
  long last_time                'Stores touch event debouncer last time value
  long value                    'Virtual value of the widget
  byte configured               'Boolean flag to identify configured widgets in the window's list
  byte enabled                  'Boolean flag to indicate widget can be drawn and can check for events
  byte invert_border            'Boolean flag to invert border colors
  byte alt                      'Boolean flag to indicate alternate key selection


OBJ
  color : "Colors"
  util  : "Utilities"
  graphics : "Graphics"
  textbox : "Text_Display"
  alt_button : "Button"



DAT
'Image file for the keypad
keypad_image FILE "Keypad2.p2"

PUB null()

''+--------------------------------------------------------------------+
''   WIDGET INTERFACE METHODS
''+--------------------------------------------------------------------+
PUB set_enable(e)
  if e
    enabled := true
  else
    enabled := false
  textbox.set_enable(enabled)

PUB draw()| w, h, x, y, tw, th
''This method draws the graphical representation of this widget type
  if enabled AND image_pointer <> 0
    'Textbox
    textbox.draw()

    'Alt button
    alt_button.draw()

    'Keypad image
    util.draw_image(image_pointer, xtop, ytop+T_HEIGHT, K_WIDTH, K_HEIGHT, bg_color)

PUB check_event(coord):is_mine | x, y
  if configured AND enabled
    x := coord.WORD[0]
    y := coord.WORD[1]
    if (x >= xtop AND x <= xbot) AND (y >= ytop AND y <= ybot)
      is_mine := true

      if event_handler <> 0
        if (getms()-last_time) >= DEBOUNCE_TIMER          'debounce the event
          debug(udec(x), udec(y))
          if (x >= (xbot-40)) AND (y <= (ytop+T_HEIGHT))
            debug("button pressed")
            alt_button.check_event(coord)
          else
            draw_key(x,y)

PRI draw_key(x,y)|k, chrs, ptr
  k := get_key_pressed(x,y)
  if k <> 0
    chrs := util.get_characters(string_pointer)

    if k == $81 'Backspace
      if chrs > 0
        BYTE[string_pointer + chrs - 1] := 0
        textbox.draw()

    elseif k == $80 'Enter
      event_handler(id, string_pointer)             'call the event handler and pass along ptr to text
      util.clear_string(string_pointer, 16)
      textbox.draw()

    else 'Add character
      ptr := 0  'initialized pointer
      BYTE[ptr][0] := k
      BYTE[ptr][1] := 0
      util.join_strings(string_pointer, ptr, string_pointer, textbox.MAX_CHARACTERS)
      textbox.refresh()

    last_time := getms()                            'reset debounce timer

''+--------------------------------------------------------------------+
''   CONFIGURATION METHODS
''+--------------------------------------------------------------------+
PUB configure(i, xt, yt, bg, fg, ol)
  id := i
  xtop := xt
  ytop := yt <# (320-K_HEIGHT-T_HEIGHT)
  xbot := xt + K_WIDTH
  ybot := yt + K_HEIGHT + T_HEIGHT
  bg_color := bg
  fg_color := fg
  ol_color := ol


  image_pointer := @keypad_image

  textbox.configure(0,xtop,ytop,K_WIDTH-40,T_HEIGHT,bg,fg,ol)
  textbox.set_align(textbox.LEFT_ALIGN)
  textbox.set_compression(6)
  textbox.set_padding(5)
  textbox.enable_buffering(false)
  textbox.set_enable(true)
  string_pointer := textbox.get_contents()
  util.clear_string(string_pointer, 16)


  alt_button.configure(0, (xbot-40), ytop, 40, T_HEIGHT, color.lighten(color.grey,8), color.black, color.grey)
  alt_button.set_mode(alt_button.TOGGLE_MODE)
  alt_button.set_font_size(1)
  alt_button.set_compression(0)
  alt_button.set_contents(@"alt")
  alt_button.set_event_handler(@mode_button_event_handler)
  alt_button.set_enable(true)

  configured := true
  last_time := getms()

PUB is_configured():conf
  conf := configured

PUB get_coordinates() : coords
  coords.BYTE[0] := xtop
  coords.BYTE[1] := ytop
  coords.BYTE[2] := xbot
  coords.BYTE[3] := ybot

PUB set_bg_color(bg)
  bg_color := bg

''+--------------------------------------------------------------------+
''   EVENT HANDLING METHODS
''+--------------------------------------------------------------------+
PUB set_event_handler(Method)
  event_handler := Method    'Sets the default event handler of this object

PUB mode_button_event_handler(i, val)
  alt := val
  if val == 0
    alt_button.set_colors(color.lighten(color.grey,8), color.black, color.grey)
    alt_button.set_invert(false)
  else
    alt_button.set_colors(color.grey, color.black, color.grey)
    alt_button.set_invert(true)
  alt_button.draw()

PRI get_key_pressed(x, y):key | rx, ry
  'Get coordinates relative to keypad's 0,0
  rx := (x - xtop)
  ry := (y - ytop - T_HEIGHT)

  'debug("get_key_pressed ",Udec(rx), udec(ry))

  'Numbers row
  if (y > ytop+T_HEIGHT) AND (ry/24 < 1)
    rx := rx/24
    if rx == 0
      key := (alt == 0) ? $31 : $21 '1 or !

    if rx == 1
      key := (alt == 0) ? $32 : $40 '2 or @

    if rx == 2
      key := (alt == 0) ? $33 : $23 '3 or #

    if rx == 3
      key := (alt == 0) ? $34 : $24 '4 or $

    if rx == 4
      key := (alt == 0) ? $35 : $25 '5 or %

    if rx == 5
      key := (alt == 0) ? $36 : $5E '6 or ^

    if rx == 6
      key := (alt == 0) ? $37 : $26 '7 or &

    if rx == 7
      key := (alt == 0) ? $38 : $2A '8 or *

    if rx == 8
      key := (alt == 0) ? $39 : $28 '9 or (

    if rx == 9
      key := (alt == 0) ? $30 : $29 '0 or )


  'Keys rows
  if ry >= 30

    'Make ry relative to Q
    ry := (ry - 30)/24
    rx := rx/24

    'First row
    if ry < 1
      if rx == 0
        key := (alt == 0) ? $51 : $3F 'Q or ?

      if rx == 1
        key := (alt == 0) ? $57 : $2B 'W or +

      if rx == 2
        key := (alt == 0) ? $45 : $2D 'E or -

      if rx == 3
        key := (alt == 0) ? $52 : $5F 'R or _

      if rx == 4
        key := (alt == 0) ? $54 : $5C 'T or \

      if rx == 5
        key := (alt == 0) ? $59 : $2F 'Y or /

      if rx == 6
        key := (alt == 0) ? $55 : $7B 'U or {

      if rx == 7
        key := (alt == 0) ? $49 : $7D 'I or }

      if rx == 8
        key := (alt == 0) ? $4F : $5B 'O or [

      if rx == 9
        key := (alt == 0) ? $50 : $5D 'P or ]

    'Second row
    if ry == 1
      if rx == 0
        key := $41 'A

      if rx == 1
        key := $53 'S

      if rx == 2
        key := $44 'D

      if rx == 3
        key := $46 'F

      if rx == 4
        key := $47 'G

      if rx == 5
        key := $48 'H

      if rx == 6
        key := $4A 'J

      if rx == 7
        key := $4B 'K

      if rx == 8
        key := $4C 'L

      if rx == 9
        key := $80 'Equal sign (ENTER)

    'Third row
    if ry == 2
      if rx == 0
        key := (alt == 0) ? $5A : $7C 'Z or |

      if rx == 1
        key := (alt == 0) ? $58 : $3C 'X or <

      if rx == 2
        key := (alt == 0) ? $43 : $3D 'C or =

      if rx == 3
        key := (alt == 0) ? $56 : $3E 'V or >

      if rx == 4
        key := (alt == 0) ? $42 : $3A 'B or :

      if rx == 5
        key := (alt == 0) ? $4E : $3B 'N or ;

      if rx == 6
        key := (alt == 0) ? $4D : $2E 'M or .

      if rx == 7
        key := (alt == 0) ? $20 : $2C 'Whitespace or ,

      if rx == 8
        key := $81 '< (Backspace)

      if rx == 9
        key := $80 'Equal sign (ENTER)
