{
  Text Display Widget
}
CON
  MAX_CHARACTERS = 16
  DEBOUNCE_TIMER = 500

'Text align constants
  #0, LEFT_ALIGN, CENTER_ALIGN, RIGHT_ALIGN

VAR
'Attributes
  long id                       'Unique ID - (window index << 4)|(button index)
  long bg_color                 'background color
  long fg_color                 'foreground color
  long ol_color                 'outline = border
  word xtop                     'Top Left X (Pixel)
  word ytop                     'Top Left Y (Pixel)
  word xbot                     'Bottom Right X (Pixel)
  word ybot                     'Bottom Right Y (Pixel)
  byte border_width             'Border width in pixels
  byte invert_border            'Boolean flag to invert border colors
  byte padding                  'Determines how far from the top left corner to start writing
  byte align                    '0 = LEFT, 1 = CENTER, 2 = RIGHT
  byte compression              'compression factor for the text
  byte contents[MAX_CHARACTERS+1] 'Should be 1 more than the display characters to account for the terminating zero
  byte prev_contents[MAX_CHARACTERS+1]
  byte font_size
  LONG string_pointer           'Hub address of string memory (addresses are LONG but memory access in hub is byte)
  LONG prev_pointer

'Method Pointers
  long event_handler            'Default event handler method pointer

'Internal state variables
  long last_time                'Stores touch event debouncer last time value
  byte configured               'Boolean flag to identify configured widgets in the window's list
  byte enabled                  'Boolean flag to indicate widget can be drawn and can check for events


OBJ
  color : "Colors"
  util  : "Utilities"
  graphics : "graphics"

PUB null()

''+--------------------------------------------------------------------+
''   WIDGET INTERFACE METHODS
''+--------------------------------------------------------------------+
PUB set_enable(e)
  if e
    enabled := true
  else
    enabled := false

PUB draw()| w,h, x, y, tw, th
''This method draws the graphical representation of this widget type
  if enabled
    'FILL
    graphics.fill_rectangle(xtop+border_width,ytop+border_width,xbot-border_width,ybot-border_width,bg_color)

    'BORDER
    util.draw_border(xtop,ytop,xbot,ybot,ol_color,border_width,invert_border)

    'TEXT
    refresh()
    if string_pointer <> 0
      w := (xbot - xtop) - 2*border_width
      h := (ybot - ytop) - 2*border_width
      tw := util.get_text_width(string_pointer, font_size, compression)
      th := util.get_text_height(font_size)
      if align == LEFT_ALIGN
        x := xtop + border_width + padding
      if align == CENTER_ALIGN
        x := xtop + border_width + (w - tw)/2
      if align == RIGHT_ALIGN
        x := xbot - border_width - tw - padding
      y := ytop + border_width + (h - th)/2
      util.draw_text(x,y,string_pointer,prev_pointer,font_size,compression,bg_color,fg_color)

PUB refresh()| w,h, x, y, tw, th
''This method is similar to draw() but it doesn't fill the background or
''draw the border
    if enabled AND string_pointer <> 0
      w := (xbot - xtop) - 2*border_width
      h := (ybot - ytop) - 2*border_width
      tw := util.get_text_width(string_pointer, font_size, compression)
      th := util.get_text_height(font_size)
      if align == LEFT_ALIGN
        x := xtop + border_width + padding
      if align == CENTER_ALIGN
        x := xtop + border_width + (w - tw)/2
      if align == RIGHT_ALIGN
        x := xbot - border_width - tw - padding
      y := ytop + border_width + (h - th)/2
      util.draw_text(x,y,string_pointer,prev_pointer,font_size,compression,bg_color,fg_color)


PUB check_event(coord):is_mine | x, y
  is_mine := false

  if configured AND enabled
    x := coord.WORD[0]
    y := coord.WORD[1]
    if (x >= xtop AND x <= xbot) AND (y >= ytop AND y <= ybot)
      is_mine := true

      if event_handler <> 0
        if (getms()-last_time) >= DEBOUNCE_TIMER          'debounce the event
          event_handler(id)                               'call the event handler and pass along id of this Text display
          last_time := getms()                            'reset debounce timer


''+--------------------------------------------------------------------+
''   CONFIGURATION METHODS
''+--------------------------------------------------------------------+
PUB configure(i, xt, yt, w, h, bg, fg, ol)
  id := i
  xtop := xt
  ytop := yt
  xbot := w + xt 'xb
  ybot := h + yt 'yb

  bg_color := bg
  fg_color := fg
  ol_color := ol
  border_width := 1
  invert_border := true
  align := CENTER_ALIGN
  font_size := 2
  padding := 2
  compression := 5
  enable_buffering(true)
  last_time := getms()

  configured := true

PUB is_configured():conf
  conf := configured

PUB set_coordinates(xt, yt, xb, yb)
  xtop := xt
  ytop := yt
  xbot := xb
  ybot := yb

PUB get_coordinates() : coords
  coords.BYTE[0] := xtop
  coords.BYTE[1] := ytop
  coords.BYTE[2] := xbot
  coords.BYTE[3] := ybot

PUB set_colors(bg, fg, ol)
  bg_color := bg
  fg_color := fg
  ol_color := ol

PUB get_colors(): bg, fg, ol
  bg := bg_color
  fg := fg_color
  ol := ol_color

PUB set_font_size(s)
  font_size := 1 #> s <#2

PUB set_align(a)
  align := LEFT_ALIGN #> a <# RIGHT_ALIGN

''+--------------------------------------------------------------------+
''   EVENT HANDLING METHODS
''+--------------------------------------------------------------------+
PUB set_event_handler(Method)
  event_handler := Method    'Sets the default event handler of this object

PUB call_event_handler(Method)
  Method(id)                    'Calls a passed event handler


''+--------------------------------------------------------------------+
''   OTHER METHODS
''+--------------------------------------------------------------------+
PUB set_value(val)'|c
  util.set_value(val, string_pointer)

PUB set_contents(addr)|c,i
  'Clear contents
  repeat i from 0 to MAX_CHARACTERS
    contents[i] := 0

  'Set new contents
  repeat i from 0 to MAX_CHARACTERS-1                   'Reserve last character place for the terminating 0
    c := BYTE[addr][i]
    if c <> 0
      contents[i] := c
    else
      quit
  contents[i+1] := 0
  string_pointer := @contents

{
PUB clear()| c
  contents[0] := 0
  'FILL
  LONG[drawing_method_pointer][FILL_RECTANGLE](xtop+border_width,ytop+border_width,xbot-border_width,ybot-border_width,bg_color)
  'contents := String("                ")
  'draw()
}

PUB update_contents(s)
  set_contents(s)
  draw()

PUB get_value():value
  value := util.get_value(@contents)

PUB set_padding(p)
  padding := p

PUB set_border_width(bw)
  border_width := bw

PUB set_compression(c)
  compression := c

PUB set_invert(v)
  invert_border := v

PUB enable_buffering(v)
  if v == true
    prev_pointer := @prev_contents
  else
    prev_pointer := 0