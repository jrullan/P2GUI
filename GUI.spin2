{
  GUI Object

  This is the main object of the P2GUI framework.
  It serves the following purposes:

  1) It is the container of all other widgets and screens
  2) It wraps the display and the touchscreen drivers
  3) It is the default recipient of any touch event
  4) It passes down the touch event to all its children
    until one of them claims the event.
  5) It contains 9 area objects to provide a visual guide
    of the general layout of the application
  6) It initializes the Graphics object to expose
    all of the driver's drawing methods through the use
    of method pointers.
  7) It is responsible of initially drawing all enabled widgets
}

CON
  DEBOUNCE_TIMER = 100

''Orientation
  #0, LANDSCAPE, PORTRAIT

''LAYOUT CONSTANTS AND DRAWING FUNCTION NAMES
  #0, TOP_LEFT, TOP_CENTER, TOP_RIGHT, ...
    MIDDLE_LEFT, MIDDLE_CENTER, MIDDLE_RIGHT, ...
    BOTTOM_LEFT, BOTTOM_CENTER, BOTTOM_RIGHT

'Drawing Methods Constants (for mapping driver methods to graphics methods)
  #0, CLEAR_SCREEN, SET_FOREGROUND_COLOR, SET_BACKGROUND_COLOR, ...
    SET_WINDOW, FILL_WINDOW, SET_COL_ROW, ...
    DRAW_CHAR, DRAW_STRING, DRAW_ICON, ...
    DRAW_PIXEL, DRAW_LINE, DRAW_CIRCLE, ...
    DRAW_RECTANGLE, FILL_RECTANGLE, SELECT_FONT_SIZE, ...
    FILL_CIRCLE, DRAW_FAST_HLINE, DRAW_FAST_VLINE, ...
    SEND_IMAGE, MAX_METHODS

  MAX_WIDGETS = 10

VAR
'Attributes
  long bg_color       'background color
  long fg_color       'foreground color
  long ol_color       'outline = border
  long event_coordinates        'word[0]=x word[1]=y
  long width          'driver requires it to be long
  long height         'driver requires it to be long
  byte orientation
  byte rotation
  byte display_configured

  long last_time                'Stores touch event debouncer last time value
  long screen_saving_delay
  long screen_saving_last_time
  byte screen_saving


'Widgets method pointers
  LONG widget_enable_method[MAX_WIDGETS]
  LONG widget_draw_method[MAX_WIDGETS]
  LONG widget_check_event_method[MAX_WIDGETS]
  LONG widget_counter

'Internal Numkey
  LONG external_numkey_handler

OBJ
  display      : "LCD_Graphics_Driver"
  color        : "Colors"
  area[9]      : "Area"      '9 Areas objects:
                                'top left, top center, top right
                                'middle left, middle center, middle right
                                'bottom left, bottom center, bottom right
  graphics     : "Graphics"
  numkey       : "Numkey"

PUB null()

'Returns the widget counter to use for assigning unique ids to gui's widgets
PUB new_id():id
  return widget_counter

''+--------------------------------------------------------------------+
''   Internal Numkey methods
''+--------------------------------------------------------------------+

'Internal Numkey configuration
PRI config_numkey()
  numkey.configure(0,(width/2)-60,(height/2 - 80),120,160,color.darken(color.white,2), color.black, color.grey)
  numkey.set_border_width(2)
  numkey.set_font_size(2)
  numkey.set_value(0)
  numkey.set_event_handler(@internal_numkey_handler)
  numkey.set_enable(false)
  add_widget(@numkey.set_enable, @numkey.draw, @numkey.check_event)

'Internal Numkey event handler
PRI internal_numkey_handler(id,val)
  external_numkey_handler(id,val)
  numkey.set_enable(false)
  numkey.set_value(0)

'Method to invoke the numkey, must event handler method pointer
PUB get_numkey(handler_method_ptr)
  external_numkey_handler := handler_method_ptr
  numkey.set_enable(true)
  numkey.draw()



''+--------------------------------------------------------------------+
''   DISPLAY CONFIGURATION
''+--------------------------------------------------------------------+
PUB init(bg, fg, ol, o, cal) |  i
'' Initializes the colors of the Canvas
'' and then starts the display driver

  'set width, height, and rotation based on layout
  orientation := o
  if orientation == PORTRAIT
    rotation := display.LCD_mirror_0
    width := 240
    height := 320
  else
    rotation := display.LCD_mirror_90
    width := 320
    height := 240

  bg_color := bg
  fg_color := fg
  ol_color := ol

  graphics.set_pointer(CLEAR_SCREEN, @display.clearScreen)
  graphics.set_pointer(SET_FOREGROUND_COLOR, @display.setFGColor)
  graphics.set_pointer(SET_BACKGROUND_COLOR, @display.setBGColor)
  graphics.set_pointer(SET_WINDOW, @display.setWindow)
  graphics.set_pointer(FILL_WINDOW, @display.fillWindow)
  graphics.set_pointer(SET_COL_ROW, @display.setColRow)
  graphics.set_pointer(DRAW_CHAR, @display.drawChar)
  graphics.set_pointer(DRAW_STRING, @display.drawString)
  graphics.set_pointer(DRAW_ICON, @display.drawIcon)
  graphics.set_pointer(DRAW_PIXEL, @display.drawPixel)
  graphics.set_pointer(DRAW_LINE, @display.drawLine)
  graphics.set_pointer(DRAW_CIRCLE, @display.drawCircle)
  graphics.set_pointer(DRAW_RECTANGLE, @display.drawRectangle)
  graphics.set_pointer(FILL_RECTANGLE, @display.fillRectangle)
  graphics.set_pointer(SELECT_FONT_SIZE, @display.SelectFontSize)
  graphics.set_pointer(FILL_CIRCLE, @display.fillCircle)
  graphics.set_pointer(DRAW_FAST_HLINE, @display.drawFastHLine)
  graphics.set_pointer(DRAW_FAST_VLINE, @display.drawFastVLine)
  graphics.set_pointer(SEND_IMAGE,@display.sendImage)

  'set all areas colors to match canvas
  repeat i from 0 to 8
    area[i].configure(i,bg_color,fg_color,ol_color)

  configure_display(cal)

  'Internal numkey
  config_numkey()

  screen_saving_last_time := getms()


PUB configure_display(cal)
'' Start display and touchscreen driver
'' and clear the screen

  'parameters: width,height,rotation,touchscreen
  display.Start(width, height, rotation, true)

  if cal <> 0
    display.calibrateTouch()
  else
    display.set_calibration(-3714, -3531, 3_935, 3_784)

  display.setFGcolor(fg_color)  'set foreground color
  display.setBGcolor(bg_color)  'set background color
  display.clearScreen()

  display_configured := true


PUB set_TFT_pins(ce,rst,dc,sda,clk,led,v3,gnd)
  display.SetLcdPins(ce,rst,dc,sda,clk,led,v3,gnd)

PUB set_TS_pins(clk,cs,din,do,irq)
  display.SetTouchPins(clk,cs,din,do,irq)

''+--------------------------------------------------------------------+
''   AREAS CONFIGURATION
''+--------------------------------------------------------------------+
PUB set_area_coordinates(w_index, xtop, ytop, xbot, ybot)
'' Set one of the 9 windows in the canvas bounding rectangle coordinates
  area[w_index].set_coordinates(xtop,ytop,xbot,ybot)
  debug("setting window...",udec(w_index), udec(xtop), udec(ytop), udec(xbot), udec(ybot))

PUB set_area_percent(w_index, hor_percent, ver_percent)|xt,yt,xb,yb,w,h
  w := (width)* hor_percent / 100
  h := (height)* ver_percent / 100

  if w_index == 0
    xt := 0
    yt := 0
    xb := (xt + w -1)  <# (width-1)
    yb := (yt + h -1)  <# (height-1)

  if w_index == 1 OR w_index == 2
    xt,yt,xb,yb := area[w_index-1].get_coordinates()
    xt := (xb + 1)  <# (width-1)
    xb := xt #> (xt + w -1)  <# (width-1)
    yb := yt #> (yt + h -1)  <# (height-1)

  if w_index == 3
    xt,yt,xb,yb := area[w_index-1].get_coordinates()
    xt := 0
    yt := (yb + 1) <# (height-1)
    xb := xt #> (xt + w -1)  <# (width-1)
    yb := yt #> (yt + h -1)  <# (height-1)

  if w_index == 4 OR w_index == 5
    xt,yt,xb,yb := area[w_index-1].get_coordinates()
    xt := (xb + 1)  <# (width-1)
    xb := xt #> (xt + w -1)  <# (width-1)
    yb := yt #> (yt + h -1)  <# (height-1)

  if w_index == 6
    xt,yt,xb,yb := area[w_index-1].get_coordinates()
    xt := 0
    yt := (yb + 1) <# (height-1)
    xb := xt #> (xt + w -1)  <# (width-1)
    yb := yt #> (yt + h -1)  <# (height-1)

  if w_index == 7 OR w_index == 8
    xt,yt,xb,yb := area[w_index-1].get_coordinates()
    xt := (xb + 1)  <# (width-1)
    xb := xt #> (xt + w -1)  <# (width-1)
    yb := yt #> (yt + h -1)  <# (height-1)

  set_area_coordinates(w_index,xt,yt,xb,yb)
  debug("new coords...",udec(w_index), udec(xt), udec(yt), udec(xb), udec(yb))

PUB set_vertical_layout(h1,h2,h3)
  h1 := 1 #> h1
  h2 := 1 #> h2
  h3 := 1 #> h3
  area[0].set_ys(0,h1-1)
  area[1].set_ys(0,h1-1)
  area[2].set_ys(0,h1-1)
  area[3].set_ys(h1,h1+h2-1)
  area[4].set_ys(h1,h1+h2-1)
  area[5].set_ys(h1,h1+h2-1)
  area[6].set_ys(h1+h2,h1+h2+h3-1)
  area[7].set_ys(h1+h2,h1+h2+h3-1)
  area[8].set_ys(h1+h2,h1+h2+h3-1)

PUB set_horizontal_layout(w1,w2,w3)
  w1 := 1 #> w1
  w2 := 1 #> w2
  w3 := 1 #> w3
  area[0].set_xs(0,w1-1)
  area[1].set_xs(w1,w1+w2-1)
  area[2].set_xs(w1+w2,w1+w2+w3-1)
  area[3].set_xs(0,w1-1)
  area[4].set_xs(w1,w1+w2-1)
  area[5].set_xs(w1+w2,w1+w2+w3-1)
  area[6].set_xs(0,w1-1)
  area[7].set_xs(w1,w1+w2-1)
  area[8].set_xs(w1+w2,w1+w2+w3-1)

PUB set_area_bg(w_index, c)
'' Set one of the 9 windows background color
  area[w_index].set_bg_color(c)

PUB set_area_fg(w_index, c)
'' Set one of the 9 windows foreground color
  area[w_index].set_fg_color(c)

PUB set_area_ol(w_index, c)
'' Set one of the 9 window outline (border) color
  area[w_index].set_ol_color(c)

PUB draw_area(w_index) | xt,yt,xb,yb
'' Draws the background of a window
  area[w_index].draw()

PUB draw_all_areas() | i
  repeat i from 0 to 8
    draw_area(i)

PUB get_area_bg(w_index):c
  c := area[w_index].get_bg_color()

PUB draw_all_widgets()|w
  if widget_counter > 0
    repeat w from 0 to widget_counter-1
      widget_draw_method[w]()                             'call widget's draw()

PUB draw()
'' Canvas draw, first clears the screen and then draws all the windows
  if display_configured
    display.clearScreen()
    draw_all_areas()
    draw_all_widgets()


''+--------------------------------------------------------------------+
''   CONTAINER INTERFACE METHODS
''+--------------------------------------------------------------------+
PUB add_widget(enable_pointer, draw_pointer, check_event_pointer)
  if widget_counter <= MAX_WIDGETS-1
    widget_enable_method[widget_counter] := enable_pointer
    widget_draw_method[widget_counter] := draw_pointer
    widget_check_event_method[widget_counter] := check_event_pointer
    widget_counter++

''+--------------------------------------------------------------------------+
'' TOUCH event related methods
''+--------------------------------------------------------------------------+
PUB detects_valid_touch():touch
  touch := display.detects_valid_touch()

PUB get_last_valid_touch():x,y
  x,y := display.get_last_valid_touch()
  event_coordinates := (y << 16) | x

PUB scan():event, w_id, coord| i
  if detects_valid_touch()
    'debug("Detected valid touch")
    screen_saving_last_time := getms()
    if screen_saving
      screen_saving := false
      draw()
      return

    get_last_valid_touch()

    if widget_counter > 0
      repeat i from 0 to widget_counter-1
        if widget_check_event_method[i](event_coordinates):1
          event := true
          w_id := i
          coord := event_coordinates
          quit

  'Screen saver
  if NOT screen_saving AND (screen_saving_delay > 0) AND (getms()-screen_saving_last_time) > screen_saving_delay
    display.SetBGColor(color.black)
    display.clearScreen()
    display.SetBGColor(bg_color)
    screen_saving := true


PUB set_screen_saving(s)
  screen_saving_delay := s * 1000

PUB is_screen_saving():v
  v := screen_saving