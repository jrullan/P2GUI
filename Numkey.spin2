{
  Numkey Widget Object
}
CON
  DEBOUNCE_TIMER = 500
  MAX_CHARACTERS = 7

  #0, NORMAL_MODE, TOGGLE_MODE

'Drawing Methods Constants
  #0, CLEAR_SCREEN, SET_FOREGROUND_COLOR, SET_BACKGROUND_COLOR, SET_WINDOW, FILL_WINDOW, SET_COL_ROW
  #6, DRAW_CHAR, DRAW_STRING, DRAW_ICON, DRAW_PIXEL, DRAW_LINE
  #11, DRAW_CIRCLE, DRAW_RECTANGLE, FILL_RECTANGLE, SELECT_FONT_SIZE, MAX_METHODS

'Numkey Constants
  BTN_WIDTH = 40
  BTN_HEIGHT = 40


VAR
'Attributes
  long id                       'Unique ID - (window index << 4)|(button index)
  long bg_color                 'background color
  long fg_color                 'foreground color
  long ol_color                 'outline = border
  word xtop                     'Top Left X (Pixel)
  word ytop                     'Top Left Y (Pixel)
  word xbot                     'Bottom Right X (Pixel)
  word ybot                     'Bottom Right Y (Pixel)
  byte border_width             'Border width in pixels

'Method Pointers
  long event_handler            'Default event handler method pointer
  long drawing_method_pointer   'Drawing method pointers

'Internal state variables
  long last_time                'Stores touch event debouncer last time value
  byte configured               'Boolean flag to identify configured widgets in the window's list
  byte enabled                  'Boolean flag to indicate widget can be drawn and can check for events
  byte mode                     'Mode: 0 = Normal (no debouncing, value = active_value while event is true)
                                'Mode: 1 = Toggle (debouncing, value toggles on successive events)
  long value                    'Virtual value of the widget

'Button specific attributes
  byte invert_border            'Boolean flag to invert border colors
  LONG string_pointer           'Hub address of string memory (addresses are always LONG)
  byte align                    '0 = LEFT, 1 = CENTER, 2 = RIGHT
  byte contents[MAX_CHARACTERS+1]
  byte font_size
  byte padding

'Numkey specific attributes
  LONG display_bg
  LONG display_fg



OBJ
  color : "Colors"
  util  : "Utilities"

PUB null()

''+--------------------------------------------------------------------+
''   WIDGET INTERFACE METHODS
''+--------------------------------------------------------------------+
PUB set_enable(e)
  if e
    enabled := true
  else
    enabled := false

PUB draw()| w, h, tw, th, x, y
''This method draws the graphical representation of this widget type
  if enabled AND drawing_method_pointer <> 0
    'Calculate starting coordinates
    x := xtop
    y := ytop

    draw_numkey(xtop,ytop)
    draw_display()

    'reset debouncer timer
    last_time := getms()


PUB set_drawing_methods(METHOD_PTR)
  drawing_method_pointer := METHOD_PTR

PUB check_event(coord):is_mine | x, y, key,kh,yk
  kh := (ybot - ytop)/5  'keys height
  yk := ytop + kh        'y keys

  if configured AND enabled
    x := coord.WORD[0]
    y := coord.WORD[1]

    if (x >= xtop AND x <= xbot) AND (y >= yk AND y <= ybot)
      is_mine := true

      if (getms()-last_time) >= DEBOUNCE_TIMER          'debounce the event
        key := get_key_pressed(x,y)                     'Determine which key is pressed

        'digits
        if (key >= 0) AND (key <= 9) AND (util.get_digits(value) < MAX_CHARACTERS)
          update_value(value * 10 + key)

        'backspace
        if (key == 11) AND (value <> 0)
          update_value(value / 10)

        'backspace when val is 0
        if (key == 11) AND (value == 0) AND (event_handler <> 0)
          event_handler(id, -1) 'special value to indicate no changes were made to the value

        'equal (enter)
        if (key == 12) AND (event_handler <> 0)
          event_handler(id, value)
          'possibly disable numkey after calling event handler

        last_time := getms()  'reset debounce timer


''+--------------------------------------------------------------------+
''   CONFIGURATION METHODS
''+--------------------------------------------------------------------+
PUB configure(i, xt, yt, w, h, bg, fg, ol)
  id := i
  xtop := xt
  ytop := yt
  xbot := w + xt 'xb
  ybot := h + yt 'yb

  bg_color := bg
  fg_color := fg
  ol_color := ol
  border_width := 1
  invert_border := false
  display_bg := color.lighten(color.yellow,16)
  display_fg := color.black
  padding := 10
  font_size := 2
  configured := true
  last_time := getms()

PUB is_configured():conf
  conf := configured

PUB set_coordinates(xt, yt, xb, yb)
  xtop := xt
  ytop := yt
  xbot := xb
  ybot := yb

PUB get_coordinates() : coords
  coords.BYTE[0] := xtop
  coords.BYTE[1] := ytop
  coords.BYTE[2] := xbot
  coords.BYTE[3] := ybot

PUB set_colors(bg, fg, ol)
  bg_color := bg
  fg_color := fg
  ol_color := ol

PUB get_colors(): bg, fg, ol
  bg := bg_color
  fg := fg_color
  ol := ol_color

PUB set_font_size(s)
  font_size := 1 #> s <#2


''+--------------------------------------------------------------------+
''   EVENT HANDLING METHODS
''+--------------------------------------------------------------------+
PUB set_event_handler(Method)
  event_handler := Method    'Sets the default event handler of this object

PUB call_event_handler(Method)
  Method(id)                    'Calls a passed event handler

''+--------------------------------------------------------------------+
''   OTHER METHODS
''+--------------------------------------------------------------------+
PUB set_value(v)
  value := v

PUB get_value():v
  v := value

PUB set_invert(i)
  invert_border := i

PUB set_mode(m)
  mode := m

PUB set_border_width(bw)
  border_width := bw

PUB set_padding(p)
  padding := p

PUB set_contents(addr)|c,i
  'Clear contents
  repeat i from 0 to MAX_CHARACTERS
    contents[i] := 0

  'Set new contents
  repeat i from 0 to MAX_CHARACTERS-1                   'Reserve last character place for the terminating 0
    c := BYTE[addr][i]
    if c <> 0
      contents[i] := c
    else
      quit
  contents[i+1] := 0
  string_pointer := @contents

PUB update_contents(s)
  set_contents(s)
  draw()

PUB get_text_width():w | i
  repeat i from 0 to MAX_CHARACTERS-1
    if contents[i] == 0
      w := (i)*8'font_size*8
      quit

PUB get_text_height():h
  h := font_size*8


''+--------------------------------------------------------------------+
''   NUMKEY SPECIFIC METHODS
''+--------------------------------------------------------------------+
PUB update_value(new_val)
  value := new_val
  draw_display()

PRI draw_display()| digits, row_height, x, y, xw, yh, n, char_val, exp_val, val, o
  digits := util.get_digits(value)
  row_height := (ybot-ytop) / 5

  'Fill display background
  x := xtop+border_width*2
  y := ytop+border_width*2
  xw := (xbot - xtop)-4*border_width
  yh := row_height - border_width*3
  LONG[drawing_method_pointer][FILL_RECTANGLE](x, y, x+xw, y+yh, display_bg)

  o := 4  'compression
  x := x + xw - (digits * (16-o)) - o
  y := y + padding/2
  val := value

  'Draw the value
  LONG[drawing_method_pointer][SELECT_FONT_SIZE](font_size)
  LONG[drawing_method_pointer][SET_FOREGROUND_COLOR](display_fg)
  LONG[drawing_method_pointer][SET_BACKGROUND_COLOR](display_bg)

  if val == 0
    LONG[drawing_method_pointer][SET_WINDOW](x-16, y, x+16, y+16)
    LONG[drawing_method_pointer][DRAW_CHAR]($30)
  else
    repeat n from digits to 1
      exp_val := util.exponent(10, n-1)
      char_val := val / exp_val
      val := val - char_val*exp_val
      LONG[drawing_method_pointer][SET_WINDOW](x + ((16-o)*(digits-n))-o, y, x+16, y+16)
      LONG[drawing_method_pointer][DRAW_CHAR](char_val+ $30)

PRI draw_numkey(xs,ys)| col_width, row_height, xp, yp, row, col, number, x, y
  col_width := (xbot-xtop) / 3
  row_height := (ybot-ytop) / 5
  xp := (1 #> (col_width-8))/2                         'x padding
  yp := (1 #> (row_height-16))/2                        'y padding

  ''Draw borders
  'numkey outside borders
  invert_border := false
  util.draw_border(drawing_method_pointer,xtop,ytop,xbot,ybot,ol_color,border_width,invert_border)

  'display inner borders
  invert_border := true
  util.draw_border(drawing_method_pointer,xtop+border_width,ytop+border_width,xbot-border_width,ytop+row_height,ol_color,border_width,invert_border)

  ''Fill numkey background
  LONG[drawing_method_pointer][FILL_RECTANGLE](xtop+border_width,ytop+row_height,xbot-border_width,ybot-border_width,bg_color)

  ''Draw numbers 1 to 9 text
  'Set colors for drawing functions
  LONG[drawing_method_pointer][SET_FOREGROUND_COLOR](fg_color)
  LONG[drawing_method_pointer][SET_BACKGROUND_COLOR](bg_color)

  LONG[drawing_method_pointer][SELECT_FONT_SIZE](font_size)

  'Starting y for first row of keys
  ys := ytop+row_height
  repeat row from 0 to 2
    repeat col from 0 to 2
      number := row*3 + col+1 + $30
      x := (xs+xp)+ col_width * col
      y := (ys+yp)+ row_height * row
      LONG[drawing_method_pointer][SET_WINDOW](x, y, x+16, y+16)
      LONG[drawing_method_pointer][DRAW_CHAR](number)

  'Draw last row text
  repeat col from 0 to 2
    number := (col==0) ? $3C : (col==1) ? $30 : $3D     'left arrow, zero and equal sign
    x := (xs+xp)+ col_width * col
    y := (ys+yp)+ 3*row_height
    LONG[drawing_method_pointer][SET_WINDOW](x, y, x+16, y+16)
    LONG[drawing_method_pointer][DRAW_CHAR](number)

PRI get_key_pressed(x,y):key|kw,kh,yk
  kh := (ybot - ytop)/5  'keys height
  kw := (xbot - xtop)/3  'keys width
  yk := ytop + kh        'y keys

  if x >= xtop AND x <= (xtop+kw)                       'column 1
    if y >= (yk) AND y <= (yk+kh)                       'row 1
      key := 1
    if y >= (yk+kh) AND y <= (yk+2*kh)                  'row 2
      key := 4
    if y >= (yk+2*kh) AND y <= (yk+3*kh)                'row 3
      key := 7
    if y >= (yk+3*kh) AND y <= (yk+4*kh)                'row 4
      key := 11
  elseif x >= (xtop+kw) AND x <= (xtop+2*kw)            'column 2
    if y >= (yk) AND y <= (yk+kh)                       'row 1
      key := 2
    if y >= (yk+kh) AND y <= (yk+2*kh)                  'row 2
      key := 5
    if y >= (yk+2*kh) AND y <= (yk+3*kh)                'row 3
      key := 8
    if y >= (yk+3*kh) AND y <= (yk+4*kh)                'row 4
      key := 0
  elseif x >= (xtop+2*kw) AND x <= (xtop+3*kw)          'column 3
    if y >= (yk) AND y <= (yk+kh)                       'row 1
      key := 3
    if y >= (yk+kh) AND y <= (yk+2*kh)                  'row 2
      key := 6
    if y >= (yk+2*kh) AND y <= (yk+3*kh)                'row 3
      key := 9
    if y >= (yk+3*kh) AND y <= (yk+4*kh)                'row 4
      key := 12