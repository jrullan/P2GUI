{
  Trend Lean Object

  This trend object does not have the data array.
  Instead it must be passed a pointer to an existing data array
  and the size of the data array in the configure method:

  PUB configure(i, addr, size, xt, yt, w, h, bg, fg, ol)

  The idea is to make the object leaner and avoid bloating it
  with a pre-determined size of data values.
}
CON
  _clkfreq = 200_000_000
  DEBOUNCE_TIMER = 500
  MAX_CHARACTERS = 8

'Text align constants
  #0, LEFT_ALIGN, CENTER_ALIGN, RIGHT_ALIGN

'Tred constants
  #0, MODE_INTERVAL, MODE_PIXEL
  #0, PLOT_POINT, PLOT_LINE

VAR
'Attributes
  long id                       'Unique ID - (window index << 4)|(button index)
  long bg_color                 'background color
  long fg_color                 'foreground color
  long ol_color                 'outline = border
  word xtop                     'Top Left X (Pixel)
  word ytop                     'Top Left Y (Pixel)
  word xbot                     'Bottom Right X (Pixel)
  word ybot                     'Bottom Right Y (Pixel)
  byte border_width             'Border width in pixels

'Method Pointers
  long event_handler            'Default event handler method pointer

'Internal state variables
  long last_time                'Stores touch event debouncer last time value
  long value                    'Virtual value of the widget
  byte configured               'Boolean flag to identify configured widgets in the window's list
  byte enabled                  'Boolean flag to indicate widget can be drawn and can check for events
  byte invert_border            'Boolean flag to invert border colors

'Characters variables
  'byte contents[MAX_CHARACTERS+1] 'Should be 1 more than the displayed characters to account for the terminating zero
  'long string_pointer           'Hub address of string memory (addresses are LONG but memory access in hub is byte)
  'byte font_size
  'byte align                    '0 = LEFT, 1 = CENTER, 2 = RIGHT
  'byte compression              'compression factor for the text

'Trend data
  LONG data                     'Pointer to values array
  BYTE max_data_values          'Size of values array
  byte point_size               'Size of data point on trend
  byte padding
  byte auto_scale
  byte x_mode
  byte plot_mode
  byte show_marker
  byte marker_pos
  word marker_color
  LONG interval                 'Data time interval
  byte low_limit_line           'Low value to draw line
  byte high_limit_line          'High value to draw line
  byte setpoint_line            'Setpoint value to draw line
  byte trend_w
  byte trend_h
  byte x1
  byte y1
  byte x2
  byte y2
  LONG x_scale_max
  LONG x_scale_min
  LONG y_scale_max
  LONG y_scale_min


OBJ
  color : "Colors"
  util  : "Utilities"
  graphics : "graphics"

PUB null()

''+--------------------------------------------------------------------+
''   WIDGET INTERFACE METHODS
''+--------------------------------------------------------------------+
PUB set_enable(e)
  if e
    enabled := true
  else
    enabled := false

PUB draw()| w, h, x, y, tw, th

''This method draws the graphical representation of this widget type
  if enabled

    'FILL
    graphics.fill_rectangle(x1,y1-1,x2,y2+1,bg_color)

    'BORDER
    util.draw_border(xtop,ytop,xbot,ybot,ol_color,border_width,invert_border)

    'Axes
    draw_axes()

    'Draw reference lines (Low, Setpoint and High Horizontal lines)
    draw_reference_lines()

    'Plot Data
    if plot_mode == PLOT_POINT
      plot_data()
    else
      plot_line_data()


PUB check_event(coord):is_mine | x, y
  if configured AND enabled
    x := coord.WORD[0]
    y := coord.WORD[1]
    if (x >= xtop AND x <= xbot) AND (y >= ytop AND y <= ybot)
      is_mine := true

      if event_handler <> 0
        if (getms()-last_time) >= DEBOUNCE_TIMER          'debounce the event
          event_handler(id)                               'call the event handler and pass along id of button
          last_time := getms()                            'reset debounce timer


''+--------------------------------------------------------------------+
''   PLOTTING METHODS
''+--------------------------------------------------------------------+
PUB plot()
  if plot_mode == PLOT_POINT
    plot_data()
  else
    plot_line_data()

PUB clear_plot()|p
  repeat p from 0 to MAX_DATA_VALUES-1
    if plot_mode == PLOT_POINT
      clear_point(p)
    else
      if p < (MAX_DATA_VALUES-1) AND (p >= 0) AND (BYTE[data][p] >= 0)
        connect_points(p+1,p,bg_color)

PUB plot_value(val)
''Sets a new value in the array and plot the data
  'Clear old values
  clear_plot()

  set_data_value(val)

  'Plot Data
  plot()


PUB plot_data()|p
''Plots all values in data[]
''(Draws from right to left)
  repeat p from (MAX_DATA_VALUES-1) to 0
    draw_point(p)

PUB plot_line_data()|p
''Plots all values in data[]
''(Draws from right to left)
  repeat p from (MAX_DATA_VALUES-1) to 0
    'if p > 0 AND BYTE[data][p] >= 0
      connect_points(p, p-1,fg_color)
    'else
      'draw_point(p)

PRI connect_points(d1,d2,rgb)|xs,ys,xe,ye
  xs,ys := get_point_coords(d1)
  xe,ye := get_point_coords(d2)

  if (ys >= y1 AND ys <= y2 AND ye >= y1 AND ye <= y2)AND(xs >= x1 AND xs <= x2 AND xe >= x1 AND ye <= y2)
    graphics.draw_line(xs,ys,xe,ye,rgb)

PRI get_point_coords(p):x,y|val
''Gets x,y coordinates for data in position p and value val
  val := BYTE[data][p]
  if x_mode == MODE_INTERVAL
    'Interval based
    x := x2 - Round(interval *. Float(MAX_DATA_VALUES-p-1)) - 2*point_size 'xbot - border_width - padding - (interval)*((MAX_DATA_VALUES-1)-p) - point_size*2
  elseif x_mode == MODE_PIXEL
    'Pixel based
    x := xbot - border_width - padding - point_size*2 - ((MAX_DATA_VALUES-1)-p)

  if auto_scale
    y := util.scale(BYTE[data][p], get_min_data(), get_max_data(), ybot-border_width-padding, ytop+border_width+padding)
  else
    y := util.scale(BYTE[data][p], y_scale_min, y_scale_max, ybot-border_width-padding, ytop+border_width+padding)

PRI draw_point(p)|size, x, y, xb, yb, c
''Draws a point of at least 2x2 pixels

  'debug("drawing point " , udec(p), " value " , Sdec(BYTE[data][p]))
  'Do not draw negative points
  if BYTE[data][p] == 255
    return

  x,y := get_point_coords(p)
  ' debug(udec(x), udec(y))

  if (x >= x1 AND x <= x2) AND (y >= y1 AND y <= y2)
    if show_marker AND p == marker_pos
      size := 1 #> (point_size+1) * 2
      c := marker_color
    else
      size := 1 #> (point_size * 2)
      c := fg_color
    x := x - size/2
    y := y - size/2
    if size == 1
      graphics.draw_pixel(x,y,c)
    else
      xb := x + size
      yb := y + size
      graphics.fill_rectangle(x,y,xb,yb,c)

PRI clear_point(p)|size, x, y, xb, yb
''Draws a point of at least 2x2 pixels
  x,y := get_point_coords(p)
  if (x >= x1 AND x <= x2) AND (y >= y1 AND y <= y2)
    if show_marker AND p == marker_pos
      size := 1 #> (point_size+1) * 2
    else
      size := 1 #> (point_size * 2)
    x := x - size/2
    y := y - size/2
    if size == 1
      graphics.draw_pixel(x,y,bg_color)
    else
      xb := x + size
      yb := y + size
      graphics.fill_rectangle(x,y,xb,yb,bg_color)

PRI draw_axes()
''<---- NOT YET IMPLEMENTED ---->

PRI draw_reference_lines()
''<---- NOT YET IMPLEMENTED ---->


PUB set_x_mode(m)
  x_mode := MODE_INTERVAL #> m <# MODE_PIXEL

PUB set_plot_mode(m)
  plot_mode := PLOT_POINT #> m <# PLOT_LINE
  return
  if plot_mode == PLOT_POINT
    set_point_size(1)
  else
    set_point_size(2)

PUB set_point_size(s)
  point_size := 0 #> s <# 1

PUB set_auto_scale(a)
  auto_scale := a

PUB set_y_scale(min,max)
  y_scale_min := min
  y_scale_max := max

PUB set_x_scale(min,max)
  x_scale_min := min
  x_scale_max := max

PUB set_data_value(v)|d
  v := 0 #> v <# 255

  'Move data to make space for the new value (drops oldest value data[0])
  repeat d from 0 to MAX_DATA_VALUES-2
    BYTE[data][d] := BYTE[data][d+1]

  'Add the new value
  d++
  BYTE[data][d] := v

  ' debug(udec(BYTE[data][d]), udec(v))

PUB clear_data_values()|d
  repeat d from 0 to MAX_DATA_VALUES-1
    BYTE[data][d] := -1

PUB enable_marker(e)
  show_marker := e

PRI get_max_data():max|d
  max := BYTE[data][0]
  repeat d from 1 to MAX_DATA_VALUES-1
    if BYTE[data][d] > max
      max := BYTE[data][d]

PRI get_min_data():min|d
  min := BYTE[data][0]
  repeat d from 1 to MAX_DATA_VALUES-1
    if BYTE[data][d] < min
      min := BYTE[data][d]



''+--------------------------------------------------------------------+
''   CONFIGURATION METHODS
''+--------------------------------------------------------------------+
PUB configure(i, addr, size, xt, yt, w, h, bg, fg, ol)|d
  data := addr
  max_data_values := size

  'Initialize data to -1 so it wont show any data points initially
  repeat d from 0 to MAX_DATA_VALUES-1
    BYTE[data][d] := -1

  id := i
  xtop := xt
  ytop := yt
  xbot := w + xt 'xb
  ybot := h + yt 'yb

  bg_color := bg
  fg_color := fg
  ol_color := ol
  border_width := 1
  invert_border := true

  point_size := 1
  padding := 6

  x_scale_min := 0
  x_scale_max := MAX_DATA_VALUES-1
  y_scale_min := 0
  y_scale_max := 100
  auto_scale := false

  trend_w := (xbot - xtop) - 2*border_width - 2*padding
  trend_h := (ybot - ytop) - 2*border_width - 2*padding
  interval := Float(trend_w) /. Float(MAX_DATA_VALUES)

  x1 := (xtop + border_width + padding)
  y1 := (ytop + border_width + padding)
  x2 := (xbot - border_width - padding)
  y2 := (ybot - border_width - padding)

  marker_pos := MAX_DATA_VALUES-1
  marker_color := color.red

  configured := true
  last_time := getms()

{
PUB set_data(addr, size)|d
  data := addr
  max_data_values := size

  'Initialize data to -1 so it wont show any data points initially
  repeat d from 0 to MAX_DATA_VALUES-1
    BYTE[data][d] := -1

  x_scale_min := 0
  x_scale_max := MAX_DATA_VALUES-1
  y_scale_min := 0
  y_scale_max := 100
  auto_scale := false

  interval := Float(trend_w) /. Float(MAX_DATA_VALUES-1)

  marker_pos := MAX_DATA_VALUES-1
  marker_color := color.red

  configured := true
}

PUB is_configured():conf
  conf := configured

PUB set_coordinates(xt, yt, xb, yb)
  xtop := xt
  ytop := yt
  xbot := xb
  ybot := yb

PUB get_coordinates() : coords
  coords.BYTE[0] := xtop
  coords.BYTE[1] := ytop
  coords.BYTE[2] := xbot
  coords.BYTE[3] := ybot

PUB set_colors(bg, fg, ol)
  bg_color := bg
  fg_color := fg
  ol_color := ol

PUB get_colors(): bg, fg, ol
  bg := bg_color
  fg := fg_color
  ol := ol_color

''+--------------------------------------------------------------------+
''   EVENT HANDLING METHODS
''+--------------------------------------------------------------------+
PUB set_event_handler(Method)
  event_handler := Method    'Sets the default event handler of this object

PUB call_event_handler(Method)
  Method(id)                 'Calls a passed event handler

''+--------------------------------------------------------------------+
''   OTHER METHODS
''+--------------------------------------------------------------------+
PUB set_border_width(bw)
  border_width := bw

PUB set_marker(d)
  marker_pos := 0 #> d <# MAX_DATA_VALUES-1
  value := BYTE[data][marker_pos]

PUB get_marker():d
  return marker_pos

PUB move_marker_left()
  marker_pos := 0 #> marker_pos-1
  value := BYTE[data][marker_pos]

PUB move_marker_right()
  marker_pos := marker_pos+1 <# MAX_DATA_VALUES-1
  value := BYTE[data][marker_pos]

PUB get_value():val
  return value

PUB set_marker_color(c)
  marker_color := c